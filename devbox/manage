#!/usr/bin/env python3

import subprocess
import sys
import boto3
import re
from pathlib import Path

# Define variables
ACTION = sys.argv[1]  # "start" or "stop"
INSTANCE_NAME = "sproutchat-devbox"
PROFILE = "default"
TERRAFORM_DIR = f"{Path(__file__).resolve().parent}"
ssh_config_path = Path.home() / ".ssh/config"

# Initialize boto3 session with the specified profile
session = boto3.Session(profile_name=PROFILE)
ec2 = session.client("ec2")


def get_instance_id():
    """Retrieve instance ID from Terraform output."""
    try:
        result = subprocess.run(
            ["terraform", "-chdir=" + TERRAFORM_DIR, "output", "-raw", "instance_id"],
            capture_output=True,
            text=True,
            check=True,
        )
        instance_id = result.stdout.strip()
        # Ensure valid instance ID format
        if re.match(r"^[a-zA-Z0-9\-]+$", instance_id):
            return instance_id
    except subprocess.CalledProcessError:
        return None


def initialize_terraform():
    """Initialize Terraform configuration and apply changes."""
    print("Initializing Terraform...")
    subprocess.run(["terraform", "-chdir=" + TERRAFORM_DIR, "init"], check=True)
    print("Applying Terraform configuration...")
    subprocess.run(
        ["terraform", "-chdir=" + TERRAFORM_DIR, "apply", "-auto-approve"], check=True
    )


def update_ssh_config(public_ip):
    """Update the .ssh/config file with the new IP address."""
    ssh_config_entry = f"""Host {INSTANCE_NAME}
    HostName {public_ip}
    User ubuntu
    IdentityFile ~/.ssh/id_rsa
    """

    # Read existing SSH config, if it exists
    if ssh_config_path.exists():
        with open(ssh_config_path, "r") as file:
            config_content = file.read()

        # Check if the host entry already exists
        if f"Host {INSTANCE_NAME}" in config_content:
            # Update existing entry with the new IP
            config_content = re.sub(
                f"Host {INSTANCE_NAME}.*?IdentityFile.*?~/.ssh/id_rsa",
                ssh_config_entry.strip(),
                config_content,
                flags=re.DOTALL,
            )
        else:
            # Append the new entry
            config_content += f"\n{ssh_config_entry}"
    else:
        # New config file content
        config_content = ssh_config_entry

    with open(ssh_config_path, "w") as file:
        file.write(config_content)

    print(f"Updated .ssh/config with the new IP address: {public_ip}")


def manage_instance(instance_id):
    """Start or stop the instance based on the ACTION argument."""
    if ACTION == "start":
        # Start the instance
        ec2.start_instances(InstanceIds=[instance_id])
        print("Starting instance...")
        ec2.get_waiter("instance_running").wait(InstanceIds=[instance_id])
        print("Instance is running.")

        # Get the current public IP after starting the instance
        instance_info = ec2.describe_instances(InstanceIds=[instance_id])
        public_ip = instance_info["Reservations"][0]["Instances"][0]["PublicIpAddress"]

        # Update the .ssh/config file with the new IP
        update_ssh_config(public_ip)

    elif ACTION == "stop":
        # Stop the instance
        ec2.stop_instances(InstanceIds=[instance_id])
        print("Stopping instance...")
        ec2.get_waiter("instance_stopped").wait(InstanceIds=[instance_id])
        print("Instance is stopped.")

    else:
        print("Invalid action. Use 'start' or 'stop'.")
        sys.exit(1)


# Main logic
instance_id = get_instance_id()

# If INSTANCE_ID is empty, run Terraform to create the infrastructure
if not instance_id:
    print("No instance found. Creating infrastructure with Terraform...")
    initialize_terraform()
    instance_id = get_instance_id()
    if not instance_id:
        print("Failed to retrieve instance ID after Terraform apply.")
        sys.exit(1)
else:
    print(f"Instance already exists with ID: {instance_id}")

# Manage instance based on the action
manage_instance(instance_id)
